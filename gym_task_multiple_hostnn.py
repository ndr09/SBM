from cma import CMAEvolutionStrategy as cmaes
import gymnasium as gym
import numpy as np
import functools
from random import Random
from multiprocessing import Pool
from my_network import HostNN
import pickle
import sys
import os
import math

# example of an NN, called HostNN, that works with other NNs, each deciding a weight the host  

# executed one time for each candidate
def eval(ds, render=False):

    x = ds[0]
    hnodes = ds[1]
    cumulative_rewards = []
    task = gym.make("LunarLander-v2")
    agent = HostNN([8, hnodes, 4], [2, 1, 1])

    # set the weights as the value of the candidates generated by cmaes
    agent.set_weights(x) 
    agent.nn_prune_weights(ds[2])

    # each candidate tries the task 100 times, then the resulting reward is the average
    for i in range(100):
        cumulative_rewards.append(0)
        done = False
        obs, info = task.reset(seed=i, options={})
        counter = 0
        while not done:
            output = agent.activate(obs)

            # arr[output]+=1
            if render:
                task.render()
            obs, rew, terminated, truncated, info = task.step(np.argmax(output))
            cumulative_rewards[-1] += rew

            done = terminated or truncated
        counter += 1

    return -sum(cumulative_rewards) / 100


def generator(random, args):
    return np.asarray([random.uniform(args["pop_init_range"][0],
                                      args["pop_init_range"][1])
                       for _ in range(args["num_vars"])])


def generator_wrapper(func):
    @functools.wraps(func)
    def _generator(random, args):
        return np.asarray(func(random, args))

    return _generator

# multiprocessing
def parallel_val(candidates, hnodes, pr_ratio):
    with Pool(20) as p:
        # executes one eval foreach candidate
        return p.map(eval, [[c, hnodes, pr_ratio] for c in candidates])


def experiment_launcher(config):
    seed = config["seed"]
    hnodes = config["hnodes"]
    pr_ratio = config["pr_ratio"]


    args = {}
    fka = HostNN([8, hnodes, 4], [2, 2 ,1])

    
    #os.makedirs("./results_NN/", exist_ok=True)
    #os.makedirs("./results_NN/" + str(hnodes), exist_ok=True)
    #os.makedirs("./results_NN/" + str(hnodes) + "/" + str(seed), exist_ok=True)
    #os.makedirs("./results_NN/" + str(hnodes) + "/" + str(pr_ratio) + "/" + str(seed), exist_ok=True)
    
    args["num_vars"] = fka.nweights * fka.guestnWeights # Number of dimensions of the search space
    args["max_generations"] = 50
    args["sigma"] = 1.0  # default standard deviation
    args["num_offspring"] = 40 #4 + int(math.floor(3 * math.log(fka.nweights)))  # lambda
    args["pop_size"] = 20 #int(math.floor(args["num_offspring"] / 2))  # mu
    args["pop_init_range"] = [-1, 1]  # Range for the initial population
    args["hnodes"] = hnodes
    args["seed"] = seed
      

    random = Random(seed)
    es = cmaes(generator(random, args),
               args["sigma"],
               {'popsize': args["num_offspring"],
                'seed': seed,
                'CMA_mu': args["pop_size"]})
    gen = 0
    logs = []
    while gen <= args["max_generations"]:
        candidates = es.ask()  # get list of new solutions
        fitnesses = parallel_val(candidates, hnodes, pr_ratio)
        print("generation "+str(gen)+"  "+str(fitnesses)+"  "+str(np.mean(fitnesses)))
        #log = "generation " + str(gen) + "  " + str(min(fitnesses)) + "  " + str(np.mean(fitnesses))
        # with open("./results_NN/" + str(hnodes) + "/" + str(pr_ratio) + "/" + str(seed) + "/best_" + str(
        #         gen) + ".pkl", "wb") as f:
        #     pickle.dump(candidates[np.argmin(fitnesses)], f)
        # logs.append(log)
        # print(log)
        es.tell(candidates, fitnesses)
        gen += 1
    final_pop = np.asarray(es.ask())
    final_pop_fitnesses = np.asarray(parallel_val(final_pop, hnodes, pr_ratio))

    best_guy = es.best.x
    best_fitness = es.best.f

    # with open("./results_NN/" + str(hnodes) + "/" + str(pr_ratio) + "/" + str(seed) + "/" + str(
    #         best_fitness) + ".pkl", "wb") as f:
    #     pickle.dump(best_guy, f)
    # with open("./results_NN/" + str(hnodes) + "/" + str(pr_ratio) + "/" + str(seed) + "/log.txt", "w") as f:
    #     for l in logs:
    #         f.write(l + "\n")
    with open("/content/host_nn_test_"+str(best_fitness)+".pkl", "wb") as f:
        pickle.dump(best_guy, f)


if __name__ == "__main__":
    args = {}
    seed = 0
    experiment_launcher({"seed": seed, "hnodes": 4, "pr_ratio": 30})
    # for hn in range(5, 10):
    #     for pr_ratio in range(20, 100, 20): # 20, 40, 60, 80
    #         experiment_launcher({"seed": seed, "hnodes": hn, "pr_ratio": pr_ratio})
